---
variables:
  CI_APPLICATION_REPOSITORY: $CI_REGISTRY_IMAGE
  CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
  CI_CONTAINER_NAME: ci_job_build_${CI_JOB_ID}
  DOMAIN: silentlair.tech

stages:
  - test
  - build
  - review
  - release
  - cleanup
  - deploy

unittest:
  stage: test
  image: python:3.9-alpine3.16
  script:
    - apk --no-cache --update add build-base
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -r requirements-test.txt
    - python -m unittest discover -s tests/
    - coverage run -m unittest discover -s tests/
    - coverage report --include ui/ui.py
    - coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  only:
    - branches

build:
  stage: build
  image: docker:git
  services:
    - docker:18.09.7-dind
  script:
    - setup_docker
    - build
  variables:
    DOCKER_DRIVER: overlay2
  only:
    - branches

review:
  stage: review
  image: dtzar/helm-kubectl:3.9
  script:
    - kube_context
    - ensure_namespace
    - deploy
  variables:
    KUBE_NAMESPACE: review
    host: $CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG.$DOMAIN
  environment:
    name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG.$DOMAIN
    on_stop: stop_review
  only:
    refs:
      - branches
  except:
    - master

release:
  stage: release
  image: docker
  services:
    - docker:18.09.7-dind
  script:
    - setup_docker
    - release
  only:
    - master

stop_review:
  stage: cleanup
  image: dtzar/helm-kubectl:3.9
  variables:
    GIT_STRATEGY: none
  script:
    - kube_context
    - delete
  environment:
    name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
  except:
    - master

bridge:
  stage: deploy
  trigger:
    project: cloud-team/search_engine_deploy
    branch: master
    strategy: depend
  only:
    - master

.auto_devops: &auto_devops |
  function setup_docker() {
    
    if ! docker info &>/dev/null; then
      if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
        export DOCKER_HOST='tcp://localhost:2375'
      fi
    fi
  }

  function build() {

    echo "Building Dockerfile-based application..."
    docker build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .

    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      echo ""
    fi

    echo "Pushing to GitLab Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    echo ""
  }

  function ensure_namespace() {
    kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  function release() {

    echo "Updating docker images ..."

    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      echo ""
    fi

    docker pull "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:$(cat VERSION)"
    docker push "$CI_APPLICATION_REPOSITORY:$(cat VERSION)"
    echo ""
  }

  function kube_context() {
    kubectl config set-cluster k8s --server="$KUBE_URL" --insecure-skip-tls-verify=true
    kubectl config set-credentials admin --token="$KUBE_TOKEN"
    kubectl config set-context default --cluster=k8s --user=admin
    kubectl config use-context default
  }

  function deploy() {
    track="${1-stable}"
    name="$CI_ENVIRONMENT_SLUG"

    if [[ "$track" != "stable" ]]; then
      name="$name-$track"
    fi

    echo "Clone deploy repository..."
    BASE_URL=`echo $CI_REPOSITORY_URL | sed "s;\/*$CI_PROJECT_PATH.*;;"`
    git clone $BASE_URL/$CI_PROJECT_NAMESPACE/search_engine_deploy.git

    echo "Download helm dependencies..."
    helm dep update search_engine_deploy/se

    export BASE_64_BASIC_AUTH_CREDENTIALS=$(echo -n "garet2022:$REGISTRY_TOKEN" | base64)

    touch .dockerconfigjson

    echo "{ \"auths\": { \"$CI_REGISTRY\": { \"auth\":\"$BASE_64_BASIC_AUTH_CREDENTIALS\" } } }" > .dockerconfigjson

    echo "Deploy helm release $name to $KUBE_NAMESPACE"
    helm upgrade --install \
      --wait \
      --set-file registry_cred=.dockerconfigjson \
      --set ui.ingress.host="$host" \
      --set ui.image.repository=$CI_APPLICATION_REPOSITORY \
      --set ui.image.tag=$CI_APPLICATION_TAG \
      --namespace="$KUBE_NAMESPACE" \
      --version="$CI_PIPELINE_ID-$CI_JOB_ID" \
      "$name" \
      search_engine_deploy/se/
  }

  function delete() {
    track="${1-stable}"
    helm list
    name="$CI_ENVIRONMENT_SLUG"
    helm delete "$name" -n review || true
  }

before_script:
  - *auto_devops